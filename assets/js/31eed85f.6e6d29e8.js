"use strict";(self.webpackChunkcodebase_doctor_docs=self.webpackChunkcodebase_doctor_docs||[]).push([[9608],{7684:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=n(5893),a=n(1151);const s={slug:"software-engineering-is-unromantic",title:"Software engineering is unromantic",authors:"bill",tags:["software","engineering","time","quality","craftsmanship"]},r=void 0,o={permalink:"/blog/software-engineering-is-unromantic",source:"@site/blog/2024-02-26-software-engineering-building-apartments.md",title:"Software engineering is unromantic",description:'I always see a lot of blog posts romanticizing software engineering. Some engineers see their work as this righteous struggle to write beautiful and perfect code against the dastardly meddling of managers, suits, and business people. But why are there no heroic engineer-led companies leading the market with their perfect code? Why does the market continually promote and incentivize "bad" code and big tech debt?',date:"2024-02-26T00:00:00.000Z",formattedDate:"February 26, 2024",tags:[{label:"software",permalink:"/blog/tags/software"},{label:"engineering",permalink:"/blog/tags/engineering"},{label:"time",permalink:"/blog/tags/time"},{label:"quality",permalink:"/blog/tags/quality"},{label:"craftsmanship",permalink:"/blog/tags/craftsmanship"}],readingTime:4.34,hasTruncateMarker:!0,authors:[{name:"Bill Liu",title:"Catalyst",key:"bill"}],frontMatter:{slug:"software-engineering-is-unromantic",title:"Software engineering is unromantic",authors:"bill",tags:["software","engineering","time","quality","craftsmanship"]},unlisted:!1},l={authorsImageUrls:[void 0]},c=[];function h(e){const t={a:"a",blockquote:"blockquote",em:"em",p:"p",strong:"strong",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:'I always see a lot of blog posts romanticizing software engineering. Some engineers see their work as this righteous struggle to write beautiful and perfect code against the dastardly meddling of managers, suits, and business people. But why are there no heroic engineer-led companies leading the market with their perfect code? Why does the market continually promote and incentivize "bad" code and big tech debt?'}),"\n",(0,i.jsx)(t.p,{children:"To understand what the market incentivizes, we must first understand the market. The software market is unique because switching to the better option is relatively easy compared to other industries, and companies can service near infinite customers with relatively little investment. Imagine if all pizza places can immediately deliver to anywhere in the world, instantly, at every hour of the day. Would anyone ever settle for bad pizza? This is the reality for software, and it's uniqueness is what makes it so lucrative: winners quickly dominate such that it's impossible for two competitors to exist in the same market."}),"\n",(0,i.jsxs)(t.p,{children:["But isn't there a lot of cases where multiple competitors coexist? What about Slack, Teams, and Discord? In reality, seemingly similar competitors only coexist either because they serve different niche markets or a loser is propped up by VC funding and long business contracts. In the given example, Discord serves a distinctly separate niche, while Slack ",(0,i.jsx)(t.a,{href:"https://www.theverge.com/22150313/how-microsoft-crushed-slack-salesforce-acquisition",children:"sold to Salesforce"})," after Microsoft started winning the enterprise clients."]}),"\n",(0,i.jsxs)(t.p,{children:["Where are these profitable market niches? Until the market is proven through success, ",(0,i.jsx)(t.strong,{children:"nobody"})," knows where these profitable market niches do and don't exist. That's why everybody is testing the market iteratively. VCs throw money at a lot of different companies in search of outsized returns. Large tech companies constantly fund unprofitable projects unrelated to their money-maker in search of new profitable markets to justify their valuation. Indie hackers commit to 12 projects in 12 months. Everybody is basically ",(0,i.jsxs)(t.a,{href:"https://en.wikipedia.org/wiki/Infinite_monkey_theorem_in_popular_culture",children:["hiring monkeys until they get ",(0,i.jsx)(t.em,{children:"A Tale of Two Cities"})]}),"."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["We were Snapchat before Snapchat. But then, Snapchat launched Stories, and when they launched Stories I was like, \"Oh shit, that's like what we're building but ",(0,i.jsx)(t.em,{children:"way"})," better, ",(0,i.jsx)(t.em,{children:"and"})," they released it before us. So like, we were Snapchat before Snapchat, but we were also Snapchat after Snapchat [Laughs]. It's like, \"Look Snapchat users, I know you love your product and I know it's great, but we got something worse for you, just give us a few more months.\""]}),"\n",(0,i.jsxs)(t.p,{children:["- Casey Neistat, talking about BEME on Steve-O's Wild Ride (",(0,i.jsx)(t.a,{href:"https://www.youtube.com/watch?v=SU5PRsSvo2E",children:"YouTube"}),")"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"And now we can finally understand why software engineering is unromantic. More important than writing the perfect code, or designing the perfect systems, the most valuable thing an engineer can do is to give their team more tries at beating the competitors to the market. And the best way to do that is to simply be okay with good enough and implement features faster. The engineering doesn't need to be perfect, other engineers don't need to be in awe of your code, it just needs to fulfill a market demand."}),"\n",(0,i.jsx)(t.p,{children:'And not just that, engineers who sacrifice speed for the "perfect" code are punished by the market. How many lines of perfectly crafted code is now sitting unused, because it never served a market niche? Implementing complex design patterns because "we might need it later," rewriting the entire codebase in a "better" language, utilizing the new hotness in databases/backend services, holding up code reviews with 20 style comments - things that are fun, makes us feel smart, and makes software engineering romantic, can actually hurt your companies chances of being the one to make it big.'}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Cooking is a craft, I like to think, and a good cook is a craftsman-not an artist. There's nothing wrong with that: the great cathedrals of Europe were built by craftsmen-though not designed by them. Practicing your craft in expert fashion is noble, honorable and satisfying. And I'll generally take a stand-up mercenary who takes pride in his professionalism over an artist any day."}),"\n",(0,i.jsxs)(t.p,{children:["- ",(0,i.jsx)(t.em,{children:"Kitchen Confidential"})," - Anthony Bourdain"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["But doesn't good software take time ",(0,i.jsx)(t.a,{href:"https://www.joelonsoftware.com/2001/07/21/good-software-takes-ten-years-get-used-to-it/",children:"[3]"})," ",(0,i.jsx)(t.a,{href:"https://www.reddit.com/r/programming/comments/uu5a5k/why_building_software_takes_time/",children:"[4]"}),'? To build faster, should we forsake code quality? Actually, building faster has never been mutually exclusive with "quality." Good software engineers have always strived to write "maintainable" code (or, ',(0,i.jsx)(t.a,{href:"https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/",children:'"easier to change"'}),"). Why? So we can save time when we inevitably change it later. The value of quality code isn't just saving time when first writing, but also saving time down the line when iterating."]}),"\n",(0,i.jsx)(t.p,{children:'So, you can have your quality and build fast. But actually, that\'s not a secret at all. In 2014 Meta famously changed their motto from "move fast and break things" to "move fast with stable infrastructure." And it\'s only getting faster - even in 1986 Fred Brook in his famous "No Silver Bullet" identified how the market has been a force in reducing "accidental complexity," incrementally speeding up development. The 10x silver bullet still hasn\'t been found, but your competitors don\'t need a silver bullet to conquer your market, they just need to beat you.'}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsxs)(t.em,{children:["Have some comments? Want to flame the author? Come join our ",(0,i.jsx)(t.a,{href:"https://discord.gg/YQZy4SXzmX",children:"Discord"}),". Want to keep up with future posts? Sign up for our ",(0,i.jsx)(t.a,{href:"https://cdn.forms-content.sg-form.com/b8ee284e-7912-11ee-be05-767cd0f2f8cc",children:"newsletter"}),"."]})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>r});var i=n(7294);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);