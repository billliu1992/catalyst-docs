"use strict";(self.webpackChunkcodebase_doctor_docs=self.webpackChunkcodebase_doctor_docs||[]).push([[239],{8262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(5893),o=n(1151);const r={},s="Log4j2",i={id:"install/jvm/log4j2",title:"Log4j2",description:"The integration for Log4j2 supports automatically associating logs with a user's session and sending log messages to Catalyst.",source:"@site/docs/install/jvm/log4j2.md",sourceDirName:"install/jvm",slug:"/install/jvm/log4j2",permalink:"/docs/install/jvm/log4j2",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Javalin",permalink:"/docs/install/jvm/javalin"},next:{title:"Guides",permalink:"/docs/category/guides"}},l={},c=[{value:"1. Add the dependencies",id:"1-add-the-dependencies",level:2},{value:"2. Initialize Catalyst",id:"2-initialize-catalyst",level:2},{value:"3. Add CatalystAppender to your Log4j2 configuration",id:"3-add-catalystappender-to-your-log4j2-configuration",level:2},{value:"4. Wrap endpoint handlers with Catalyst",id:"4-wrap-endpoint-handlers-with-catalyst",level:2},{value:"Ignore logs for Catalyst",id:"ignore-logs-for-catalyst",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"log4j2",children:"Log4j2"}),"\n",(0,a.jsxs)(t.p,{children:["The integration for ",(0,a.jsx)(t.a,{href:"https://logging.apache.org/log4j/2.x/",children:"Log4j2"})," supports automatically associating logs with a user's session and sending log messages to Catalyst."]}),"\n",(0,a.jsxs)(t.p,{children:["Before you start, you'll need to sign up for Catalyst and have your keys ready, as detailed ",(0,a.jsx)(t.a,{href:"/docs/signup",children:"here"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"1-add-the-dependencies",children:"1. Add the dependencies"}),"\n",(0,a.jsx)(t.p,{children:"Add the dependencies required for Catalyst."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="Maven"',children:"<dependency>\n    <groupId>com.catalystmonitor.client</groupId>\n    <artifactId>catalyst-core</artifactId>\n    <version>0.1.1</version>\n</dependency>\n<dependency>\n    <groupId>com.catalystmonitor.client</groupId>\n    <artifactId>catalyst-log4j2</artifactId>\n    <version>0.1.1</version>\n</dependency>\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",metastring:'title="Gradle (Kotlin)"',children:'implementation("com.catalystmonitor.client:catalyst-core:0.1.1")\nimplementation("com.catalystmonitor.client:catalyst-log4j2:0.1.1")\n'})}),"\n",(0,a.jsx)(t.h2,{id:"2-initialize-catalyst",children:"2. Initialize Catalyst"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'import com.catalystmonitor.client.core.Catalyst\nimport com.catalystmonitor.client.core.CatalystConfig\n\nCatalyst.start(\n    CatalystConfig(\n        privateKey = "<YOUR PUBLIC KEY HERE>", // The public key from the "Settings" page.\n        version: "<YOUR VERSION CODE HERE>", // Any string to differentiate different deploys, e.g. Git commit SHA\n        systemName = "catalyst-log4j2-example", // Any string to differentiate this service.\n    )\n)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"3-add-catalystappender-to-your-log4j2-configuration",children:"3. Add CatalystAppender to your Log4j2 configuration"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="resources/log4j2.xml"',children:'<Configuration status="WARN" monitorInterval="30" packages="com.catalystmonitor.client.log4j2">\n    <Properties>\n        <Property\n                name="COLOR_LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{${LOG_LEVEL_PATTERN:-%5p}}{FATAL=red, ERROR=red, WARN=yellow, INFO=green, DEBUG=blue, TRACE=blue} %style{%pid}{magenta} [%t] %style{%C{1.}}{cyan}: %m%n%ex\n        </Property>\n    </Properties>\n\n    <Appenders>\n        <Console name="Console" target="SYSTEM_OUT" follow="true">\n            <PatternLayout pattern="${COLOR_LOG_PATTERN}"/>\n        </Console>\n\n        \x3c!-- This appender automatically sends logs to Catalyst --\x3e\n        <CatalystAppender name="CatalystAppender"/>\n    </Appenders>\n\n    <Loggers>\n        <Root level="INFO">\n            <AppenderRef ref="Console"/>\n            <AppenderRef ref="CatalystAppender"/>\n        </Root>\n    </Loggers>\n</Configuration>\n'})}),"\n",(0,a.jsx)(t.h2,{id:"4-wrap-endpoint-handlers-with-catalyst",children:"4. Wrap endpoint handlers with Catalyst"}),"\n",(0,a.jsxs)(t.admonition,{type:"note",children:[(0,a.jsxs)(t.p,{children:["Instead of manually wrapping your sessions, it's recommended to use a library for your framework like ",(0,a.jsx)(t.a,{href:"./javalin",children:"Javalin"}),"."]}),(0,a.jsxs)(t.p,{children:["If your framework isn't currently supported, please reach out either ",(0,a.jsx)(t.a,{href:"mailto:bill@privium.xyz",children:"through e-mail"})," or ",(0,a.jsx)(t.a,{href:"https://discord.gg/YQZy4SXzmX",children:"via Discord"})," and we'd be happy to consider implementing a client library for your framework of choice."]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'import com.catalystmonitor.client.core.Catalyst\nimport com.catalystmonitor.client.core.ServerAction\nimport org.apache.logging.log4j.LogManager\n\nval logger = LogManager.getLogger("log-name-or-class-here")\n\nval span = Catalyst.getReporter().startServerAction(\n    ServerAction(\n        // All the handler information here...\n    )\n)\nspan.makeCurrent().use {\n    // Inside this try-with-resources block, all logs will be sent to Catalyst\n    // associated with this server call.\n    val e = RuntimeException()\n    logger\n        .atError()\n        // This exception and stack trace will be sent to Catalyst\n        .setCause(e)\n        // Both the message pattern and parameter values will be sent to Catalyst.\n        .log("This is a message with parameters: {}", 45)\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"ignore-logs-for-catalyst",children:"Ignore logs for Catalyst"}),"\n",(0,a.jsx)(t.p,{children:"You can set logs to be ignored with Catalyst."}),"\n",(0,a.jsx)(t.p,{children:"This is extremely helpful for cases like access logs, where the information captured is redundant with the information captured by Catalyst, but you still want the information logged."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'import com.catalystmonitor.client.log4j2.CATALYST_IGNORED_MARKER\nimport org.apache.logging.log4j.LogManager\n\nval logger = LogManager.getLogger("log-name-or-class-here")\n\nlogger.atInfo()\n    .withMarker(CATALYST_IGNORED_MARKER)\n    // Any fluent log methods here...\n    .log("I won\'t be sent to Catalyst!")\n'})})]})}function g(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>s});var a=n(7294);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);